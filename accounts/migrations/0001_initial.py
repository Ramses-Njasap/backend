# Generated by Django 5.1.1 on 2025-02-28 18:54

import accounts.managers.users
import accounts.models.profiles
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("configurations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BannedEmail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("datetime_banned", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="BannedPhoneNumber",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("number", models.CharField(max_length=16, unique=True)),
                ("datetime_banned", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="DeviceToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("access_token", models.TextField()),
                ("refresh_token", models.TextField()),
                ("access_token_expires_at", models.DateTimeField()),
                ("refresh_token_expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="DeviceTokenBlacklist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("access_token", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="DeviceWallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("synced_amount", models.BinaryField()),
                ("amount_in_sync_transition", models.BinaryField()),
                ("unsynced_amount", models.BinaryField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="MLMConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.PositiveIntegerField(unique=True)),
                (
                    "commission_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "qualification_sales",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MLMRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="OTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("otp", models.CharField(max_length=6)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Phone Number Verification OTP",
                "verbose_name_plural": "Phone Number Verification OTPs",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("BUYER", "buyer"),
                            ("INVESTOR", "investor"),
                            ("AGENT", "agent"),
                            ("COMPANY", "company"),
                            ("EXTERNAL", "external"),
                        ],
                        db_index=True,
                        default="BUYER",
                        max_length=15,
                    ),
                ),
                (
                    "username",
                    models.CharField(db_index=True, max_length=19, unique=True),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=16, null=True, unique=True),
                ),
                ("is_staff", models.BooleanField(default=False, null=True)),
                ("is_admin", models.BooleanField(default=False, null=True)),
                ("is_superuser", models.BooleanField(default=False, null=True)),
                ("is_active", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_mlm_user", models.BooleanField(default=False)),
                ("is_external_user", models.BooleanField(default=False)),
                ("is_account_visible", models.BooleanField(default=True)),
                ("is_account_locked", models.BooleanField(default=False)),
                ("is_online", models.BooleanField(default=False)),
                ("is_account_blocked", models.BooleanField(default=False)),
                ("is_account_deleted", models.BooleanField(default=False)),
                ("datetime_joined", models.DateTimeField(auto_now_add=True)),
                ("datetime_updated", models.DateTimeField(auto_now=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("last_logout", models.DateTimeField(blank=True, null=True)),
                ("query_id", models.BinaryField(db_index=True, max_length=10000)),
                ("secret_key", models.BinaryField(max_length=46)),
                ("_pk_hidden", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                ("banned_emails", models.ManyToManyField(to="accounts.bannedemail")),
                (
                    "banned_numbers",
                    models.ManyToManyField(to="accounts.bannedphonenumber"),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", accounts.managers.users.CreateUserManager()),
                ("get_by", accounts.managers.users.GetUserManager()),
                ("verify", accounts.managers.users.VerifyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AIConflictResolutionAssistantFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("INTERNAL", "internal"), ("EXTERNAL", "external")],
                        db_index=True,
                        default="INTERNAL",
                        help_text="Indicates whether the feature is for internal or external users .",
                        max_length=10,
                        verbose_name="Feature Type",
                    ),
                ),
                (
                    "is_custom",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a custom feature .",
                        verbose_name="Custom Checker",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the feature",
                        max_length=50,
                        unique=True,
                        verbose_name="Feature Name",
                    ),
                ),
                (
                    "max_conflict",
                    models.SmallIntegerField(
                        default=1,
                        help_text="Maximum number of conflict required to solve .",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Maximum Conflict",
                    ),
                ),
            ],
            options={
                "verbose_name": "AI Conflict Resolution Assistant Feature",
                "verbose_name_plural": "AI Conflict Resolution Assistant Feature",
                "db_table": "accounts__ai_conflict_resolution_assistant",
                "db_table_comment": "This table stores features related to conflict resolution, including the maximum number of conflicts that can be addressed.",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("name", "_type"),
                        name="ai_conflict_resolution_assistant_feature__unique_name_per_type",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="AIMarketingAssistantFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("INTERNAL", "internal"), ("EXTERNAL", "external")],
                        db_index=True,
                        default="INTERNAL",
                        help_text="Indicates whether the feature is for internal or external users .",
                        max_length=10,
                        verbose_name="Feature Type",
                    ),
                ),
                (
                    "is_custom",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a custom feature .",
                        verbose_name="Custom Checker",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the feature",
                        max_length=50,
                        unique=True,
                        verbose_name="Feature Name",
                    ),
                ),
                (
                    "max_rounds",
                    models.SmallIntegerField(
                        default=2,
                        help_text="Maximum time usage for AI marketing assistant feature per subscription .",
                        validators=[django.core.validators.MinValueValidator(2)],
                        verbose_name="Maximum Rounds",
                    ),
                ),
            ],
            options={
                "verbose_name": "AI Marketing Assistant Feature",
                "verbose_name_plural": "AI Marketing Assistant Features",
                "db_table": "accounts__ai_marketing_assistant",
                "db_table_comment": "The AIMarketingAssistantFeature table defines features related to an AI-powered marketing assistant. This assistant provides users with data-driven insights and recommendations to optimize property marketing strategies, including pricing and advertising. The '_type' field specifies whether the feature is for internal or external users, while 'is_custom' indicates if the feature has been customized. 'max_rounds' limits the number of times the AI assistant can be used per subscription. Each feature is uniquely identified by its name and type.",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("name", "_type"),
                        name="ai_marketing_assistant_feature__unique_name_per_type",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="APIKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("query_id", models.BinaryField(db_index=True, max_length=10000)),
                ("scopes", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "API Key",
                "verbose_name_plural": "API Keys",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DefaultFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("INTERNAL", "internal"), ("EXTERNAL", "external")],
                        db_index=True,
                        default="INTERNAL",
                        help_text="Indicates whether the feature is for internal or external users .",
                        max_length=10,
                        verbose_name="Feature Type",
                    ),
                ),
                (
                    "is_custom",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a custom feature .",
                        verbose_name="Custom Checker",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the feature",
                        max_length=50,
                        unique=True,
                        verbose_name="Feature Name",
                    ),
                ),
                (
                    "buyer",
                    models.BooleanField(
                        default=True,
                        help_text="By default buyer is set to True . We need to ensure that it is always True .",
                        verbose_name="Buyer",
                    ),
                ),
                (
                    "max_invite",
                    models.SmallIntegerField(
                        default=2,
                        help_text="Maximum number of invites allowed (non-negative)",
                        validators=[django.core.validators.MinValueValidator(2)],
                        verbose_name="Maximum Invite",
                    ),
                ),
                (
                    "invite_commission",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10"),
                        help_text="Commission upon invite (in percentage and non-negative value)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("10.00")),
                            django.core.validators.MaxValueValidator(Decimal("30.00")),
                        ],
                        verbose_name="Invite Commission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Default Feature",
                "verbose_name_plural": "Default Features",
                "db_table": "accounts__default_subscription",
                "db_table_comment": "This table stores default features related to subscriptions, including invite limits, commissions, and user types.",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("name", "_type"),
                        name="default_feature__unique_name_per_type",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_agent", models.TextField(null=True)),
                ("device_name", models.CharField(default="", max_length=150)),
                ("_device_token", models.TextField(blank=True, null=True)),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("MOBILE", "Mobile"),
                            ("PC", "Pc"),
                            ("TABLET", "Tablet"),
                            ("OTHER", "Other"),
                            ("UNDEFINED", "Undefined"),
                        ],
                        default="UNDEFINED",
                        max_length=11,
                    ),
                ),
                ("client_type", models.CharField(default=",", max_length=150)),
                ("operating_system", models.CharField(default=",", max_length=60)),
                ("device_signature", models.BinaryField(max_length=10000)),
                ("is_synced", models.BooleanField(default=True)),
                ("_is_trusted", models.PositiveSmallIntegerField(default=0)),
                (
                    "refresh_token_renewal_count",
                    models.PositiveSmallIntegerField(default=0, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tokens",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.devicetoken",
                    ),
                ),
                (
                    "wallet",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.devicewallet",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DeviceLoginHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("physical_address", models.JSONField()),
                ("login_at", models.DateTimeField(auto_now_add=True)),
                ("logout_at", models.DateTimeField(null=True)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.device",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="devicetoken",
            name="blacklisted_tokens",
            field=models.ManyToManyField(to="accounts.devicetokenblacklist"),
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "base_group",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="auth.group",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("COURSES", "Courses"), ("ESTATES", "Estates")],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "unique_together": {("_type", "base_group")},
            },
        ),
        migrations.CreateModel(
            name="KYCVerificationCheck",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("id_card_verified", models.BooleanField(default=False)),
                ("passport_verified", models.BooleanField(default=False)),
                ("driver_license_verified", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "KYC Verification",
                "verbose_name_plural": "KYC Verifications",
            },
        ),
        migrations.CreateModel(
            name="AccountVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email_verified", models.BooleanField(default=False)),
                ("phone_number_verified", models.BooleanField(default=False)),
                (
                    "score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("updated_on", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "kyc_verification_check",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="accounts.kycverificationcheck",
                    ),
                ),
            ],
            options={
                "verbose_name": "Account Verification",
                "verbose_name_plural": "Account Verifications",
                "ordering": ["-score"],
            },
        ),
        migrations.CreateModel(
            name="MLMUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "referral_code",
                    models.CharField(db_index=True, max_length=255, unique=True),
                ),
                ("level", models.PositiveIntegerField(default=1)),
                ("amount_generated", models.BinaryField()),
                (
                    "children",
                    models.ManyToManyField(
                        related_name="parents",
                        through="accounts.MLMRelationship",
                        to="accounts.mlmuser",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="mlmrelationship",
            name="child",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="child_relationships",
                to="accounts.mlmuser",
            ),
        ),
        migrations.AddField(
            model_name="mlmrelationship",
            name="parent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="parent_relationships",
                to="accounts.mlmuser",
            ),
        ),
        migrations.CreateModel(
            name="MLMAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("achievement_name", models.CharField(max_length=255)),
                ("achieved_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.mlmuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MLMUserConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.mlmconfig",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.mlmuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MultiLevelMarketingFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("INTERNAL", "internal"), ("EXTERNAL", "external")],
                        db_index=True,
                        default="INTERNAL",
                        help_text="Indicates whether the feature is for internal or external users .",
                        max_length=10,
                        verbose_name="Feature Type",
                    ),
                ),
                (
                    "is_custom",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a custom feature .",
                        verbose_name="Custom Checker",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the feature",
                        max_length=50,
                        unique=True,
                        verbose_name="Feature Name",
                    ),
                ),
                (
                    "sale_commission",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.01,
                        help_text="Commission a user in this plan receives upon the sale of any property. The commission follows a multi-level marketing model, where a percentage is earned directly by the seller and additional portions are distributed to users in higher levels of the hierarchy.",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.00")),
                            django.core.validators.MaxValueValidator(Decimal("30.00")),
                        ],
                        verbose_name="Sales Commission",
                    ),
                ),
                (
                    "rental_commission",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.05,
                        help_text="Commission a user in this plan receives upon the rentage of any property. The commission follows a multi-level marketing model, where a percentage is earned directly by the renter and additional portions are distributed to users in higher levels of the hierarchy.",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("5.00")),
                            django.core.validators.MaxValueValidator(Decimal("30.00")),
                        ],
                        verbose_name="Rental Commission",
                    ),
                ),
            ],
            options={
                "verbose_name": "Multi-Level Marketing Feature",
                "verbose_name_plural": "Multi-Level Marketing Features",
                "db_table": "accounts__multilevel_marketing",
                "db_table_comment": "The MultiLevelMarketingFeature table defines features that support a multi-level marketing model within the platform. Each feature specifies commissions earned by users based on property sales and rentals, with additional hierarchical payouts to higher-level users. The '_type' field distinguishes whether the feature is internal or external, and 'is_custom' indicates whether the feature is customized. Each feature is uniquely identified by its name and type, ensuring no duplicates.",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("name", "_type"),
                        name="multilevel_marketing_feature__unique_name_per_type",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="BusinessFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("INTERNAL", "internal"), ("EXTERNAL", "external")],
                        db_index=True,
                        default="INTERNAL",
                        max_length=10,
                    ),
                ),
                (
                    "is_custom",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a custom feature .",
                        verbose_name="Custom Checker",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=50)),
                ("seller", models.BooleanField(default=True)),
                (
                    "sale_deduction",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Commission on sale the system receives .For non-standard feature it should default to 10.00%",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("2.00"))
                        ],
                        verbose_name="Sale Deduction",
                    ),
                ),
                (
                    "rental_deduction",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Commission on rent the system receives .For non-standard feature it should default to 10.00%",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("2.00"))
                        ],
                        verbose_name="Rental Deduction",
                    ),
                ),
                (
                    "storage_space",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Space allocated for the storage of property media contents .For non-standard feature it should default to 1024.00 MB .",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1024.00"))
                        ],
                        verbose_name="Storage Space",
                    ),
                ),
                (
                    "consultation_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Allocated consultation hours with the real estate experts .For non-standard feature it should default to 120.00 minutes",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("120.00"))
                        ],
                        verbose_name="Consultation Hour",
                    ),
                ),
                (
                    "marketing_assistant",
                    models.OneToOneField(
                        blank=True,
                        help_text="Assists in proposing marketing decisions in terms of pricing, advertisement etc to realtors on the platform",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.aimarketingassistantfeature",
                        verbose_name="Marketing Assistant",
                    ),
                ),
                (
                    "mlm_feature",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.multilevelmarketingfeature",
                        verbose_name="Multi-Level Marketing Feature",
                    ),
                ),
            ],
            options={
                "verbose_name": "Business Feature",
                "verbose_name_plural": "Business Features",
                "db_table": "accounts__business",
                "db_table_comment": "The BusinessFeature table defines specific features and settings tailored for business purposes within the platform. Each feature is classified as either internal or external, with optional customization indicated by the 'is_custom' field. Features include details like commissions on sales and rentals, storage space allocation, and consultation hours. Additional features such as a marketing assistant or multi-level marketing support can be associated. Unique constraints ensure that each combination of 'name' and '_type' is distinct, allowing clear categorization and management of features.",
            },
        ),
        migrations.CreateModel(
            name="LoginOTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "current_otp",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="accounts.otp",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EmailVerificationOTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "current_otp",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="accounts.otp",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Verification OTP",
                "verbose_name_plural": "Email Verification OTPs",
            },
        ),
        migrations.CreateModel(
            name="PhoneNumberVerificationOTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "current_otp",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="accounts.otp",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RealEstateCertification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="kycverificationcheck",
            name="real_estate_certifications",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="accounts.realestatecertification",
            ),
        ),
        migrations.CreateModel(
            name="TeamGoalFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("INTERNAL", "internal"), ("EXTERNAL", "external")],
                        db_index=True,
                        default="INTERNAL",
                        help_text="Indicates whether the feature is for internal or external users .",
                        max_length=10,
                        verbose_name="Feature Type",
                    ),
                ),
                (
                    "is_custom",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a custom feature .",
                        verbose_name="Custom Checker",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the feature",
                        max_length=50,
                        unique=True,
                        verbose_name="Feature Name",
                    ),
                ),
                (
                    "max_team",
                    models.SmallIntegerField(
                        default=1,
                        help_text="Grouping users into small groups for joint vacation or trip .",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Maximum Team",
                    ),
                ),
                (
                    "conflict_resolver",
                    models.OneToOneField(
                        blank=True,
                        help_text="For resolving conflict amongst teams . Probably teams who want to have a trip might have varying ideas and finds it difficult to come up with travel decisions .",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.aiconflictresolutionassistantfeature",
                        verbose_name="Conflict Resolver",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Goal Feature",
                "verbose_name_plural": "Team Goal Features",
                "db_table": "accounts__team_goal",
                "db_table_comment": "This table stores features related to team goals, including maximum team size and conflict resolution settings.",
            },
        ),
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_type",
                    models.CharField(
                        choices=[("INTERNAL", "internal"), ("EXTERNAL", "external")],
                        db_index=True,
                        default="INTERNAL",
                        max_length=10,
                    ),
                ),
                ("is_custom", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=25)),
                ("description", models.TextField()),
                ("is_active", models.BooleanField(default=False)),
                (
                    "business_feature",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.businessfeature",
                    ),
                ),
                (
                    "default_feature",
                    models.OneToOneField(
                        help_text="Everything suppose to have a default feature . If no default feature then subscription is nullified .",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.defaultfeature",
                        verbose_name="Default Feature",
                    ),
                ),
                (
                    "team_feature",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.teamgoalfeature",
                        verbose_name="Team",
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription Plan",
                "verbose_name_plural": "Subscription Plans",
                "db_table": "accounts__subscription",
                "db_table_comment": "The SubscriptionPlan table defines the various subscription plans available in the system. Each plan can either be internal or external as specified by the '_type' field. Plans include a name, description, and activation status. They also specify associated features such as a mandatory default feature and an optional business-specific feature. A unique constraint ensures that each combination of 'name' and '_type' is distinct, preventing duplication.",
            },
        ),
        migrations.CreateModel(
            name="UsedOTP",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("used_on", models.DateTimeField(auto_now_add=True)),
                (
                    "email_verification_otp",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.emailverificationotp",
                    ),
                ),
                (
                    "login_otp",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.loginotp",
                    ),
                ),
                (
                    "otp",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="accounts.otp"
                    ),
                ),
                (
                    "phone_number_verification_otp",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.phonenumberverificationotp",
                    ),
                ),
            ],
            options={
                "verbose_name": "Used OTP",
                "verbose_name_plural": "Used OTPs",
            },
        ),
        migrations.AddField(
            model_name="phonenumberverificationotp",
            name="used_otp",
            field=models.ManyToManyField(
                related_name="phone_number_used_otp",
                through="accounts.UsedOTP",
                to="accounts.otp",
            ),
        ),
        migrations.AddField(
            model_name="loginotp",
            name="used_otp",
            field=models.ManyToManyField(
                related_name="login_otp", through="accounts.UsedOTP", to="accounts.otp"
            ),
        ),
        migrations.AddField(
            model_name="emailverificationotp",
            name="used_otp",
            field=models.ManyToManyField(
                related_name="email_used_otp",
                through="accounts.UsedOTP",
                to="accounts.otp",
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "statuses",
                    models.JSONField(
                        default=accounts.models.profiles.UserProfile.default_statuses
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=16,
                        null=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                8,
                                message="Phone number must be entered in the format: '+999999999'. With a minimum of 8 digits allowed.",
                            ),
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. From 8 up to 16 digits allowed.",
                                regex="^\\+[0-9]{7,15}$",
                            ),
                        ],
                    ),
                ),
                ("legal_name", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("MALE", "Male"),
                            ("FEMALE", "Female"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=8,
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="students", to="accounts.group"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preferred_currency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="configurations.currencies",
                    ),
                ),
                (
                    "preferred_language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="configurations.languages",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserSubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        choices=[
                            ("MONTHLY", "monthly"),
                            ("YEARLY", "yearly"),
                            ("LIFE TIME", "life time"),
                        ],
                        default="MONTHLY",
                        max_length=9,
                    ),
                ),
                ("duration_period", models.PositiveSmallIntegerField(default=1)),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price for user subscription .",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Price",
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                (
                    "subscription_plan",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.subscriptionplan",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="businessfeature",
            constraint=models.UniqueConstraint(
                fields=("name", "_type"), name="business_feature__unique_name_per_type"
            ),
        ),
        migrations.AddConstraint(
            model_name="teamgoalfeature",
            constraint=models.UniqueConstraint(
                fields=("name", "_type"), name="team_goal_feature__unique_name_per_type"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscriptionplan",
            constraint=models.UniqueConstraint(
                fields=("name", "_type"), name="subscription_plan__unique_name_per_type"
            ),
        ),
    ]
